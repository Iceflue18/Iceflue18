# -*- coding: utf-8 -*-
"""KMeans_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t60jGcyJQi1XG_BLDTHGVbhMbKVpxEms
"""

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Read the dataset
df = pd.read_csv('/content/Sales Transaction v.4a.csv')  # Replace with the actual path

# Check data types
print(df.dtypes)

# Check for missing values
print(df.isnull().sum())

# Handle missing values
df = df.dropna()

# Drop non-numeric columns if needed
df_numeric = df.select_dtypes(include=['float64', 'int64'])

# Scale the numeric features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_numeric)

# Determine the optimal number of clusters (optional)
# For example, using the elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the elbow graph
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')  # Within-Cluster Sum of Squares
plt.show()

# Choose the optimal number of clusters based on the elbow graph
num_clusters = 4  # Adjust as needed

# Apply KMeans clustering
kmeans = KMeans(n_clusters=num_clusters, init='k-means++', max_iter=300, n_init=10, random_state=0)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Display the resulting DataFrame with the cluster assignment
print(df)

